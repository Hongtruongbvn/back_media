import {
  Injectable,
  ConflictException,
  UnauthorizedException,
  BadRequestException,
  NotFoundException,
  InternalServerErrorException,
} from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import * as bcrypt from 'bcrypt';
import { JwtService } from '@nestjs/jwt';
import { User, UserDocument } from './schemas/user.schema';
import { CreateUserDto } from './dto/create-user.dto';
import { LoginUserDto } from './dto/login-user.dto';
import { MailerService } from '@nestjs-modules/mailer';
import { randomBytes, createHash } from 'crypto';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class AuthService {
  constructor(
    @InjectModel(User.name) private userModel: Model<UserDocument>,
    private jwtService: JwtService,
    private readonly mailerService: MailerService,
    private readonly configService: ConfigService,
  ) {}

  // --- ƒêƒÉng k√Ω ---
  async register(
    createUserDto: CreateUserDto,
  ): Promise<{ user: any; mailInfo?: any }> {
    const { username, email, password } = createUserDto;

    const reservedUsernames = [
      'admin',
      'moderator',
      'support',
      'root',
      'administrator',
    ];
    if (reservedUsernames.includes(username.toLowerCase())) {
      throw new ConflictException(
        'T√™n ng∆∞·ªùi d√πng n√†y kh√¥ng ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng.',
      );
    }

    // M√£ h√≥a m·∫≠t kh·∫©u
    const salt = await bcrypt.genSalt();
    const hashedPassword = await bcrypt.hash(password, salt);

    const newUser = new this.userModel({
      username,
      email,
      password: hashedPassword,
      isEmailVerified: false,
    });

    // L∆∞u user, b·∫Øt l·ªói duplicate key
    let result: UserDocument;
    try {
      result = await newUser.save();
    } catch (error: any) {
      // Mongo duplicate key
      if (error?.code === 11000) {
        // T√¨m tr∆∞·ªùng n√†o tr√πng (username / email)
        const key = Object.keys(error.keyValue || {})[0];
        const value = error.keyValue ? error.keyValue[key] : undefined;
        throw new ConflictException(
          `${key || 'Tr∆∞·ªùng'} "${value}" ƒë√£ t·ªìn t·∫°i.`,
        );
      }
      throw new InternalServerErrorException('ƒêƒÉng k√Ω th·∫•t b·∫°i');
    }

    // Th·ª≠ g·ª≠i email ‚Äî n·∫øu th·∫•t b·∫°i, KH√îNG rollback user; ch·ªâ log v√† tr·∫£ th√¥ng tin v·ªÅ frontend
    let mailInfo = { success: false, error: null };
    try {
      await this.sendVerificationEmail(result);
      mailInfo.success = true;
    } catch (err: any) {
      // Log l·ªói (console ƒë·ªÉ d·ªÖ debug tr√™n cloud)
      console.error('Error sending verification email:', err);
      mailInfo.success = false;
      mailInfo.error = err?.message || String(err);
    }

    const { password: _, ...user } = result.toObject();
    return { user, mailInfo };
  }

  async sendVerificationEmail(user: UserDocument) {
    // Sinh token ri√™ng cho verify (h·∫øt h·∫°n nhanh, v√≠ d·ª• 24h)
    const verificationToken = this.jwtService.sign(
      { sub: user._id.toString(), email: user.email },
      {
        expiresIn:
          this.configService.get<string>('VERIFY_TOKEN_EXPIRES_IN') || '1d',
      },
    );

    // L·∫•y frontend url t·ª´ env (fallback d√πng url b·∫°n g·ª≠i)
    const frontendUrl =
      this.configService.get<string>('FRONTEND_URL') ||
      'https://font-media.vercel.app';

    const verificationUrl = `${frontendUrl.replace(/\/$/, '')}/verify-email?token=${verificationToken}`;

    // G·ª≠i mail
    const sendResult = await this.mailerService.sendMail({
      to: user.email,
      subject: 'Ch√†o m·ª´ng! Vui l√≤ng x√°c th·ª±c email c·ªßa b·∫°n',
      html: `<p>Xin ch√†o ${user.username},</p>
             <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω. Vui l√≤ng b·∫•m v√†o <a href="${verificationUrl}">ƒë√¢y</a> ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n. Link c√≥ hi·ªáu l·ª±c trong 24 gi·ªù.</p>`,
    });

    return sendResult;
  }

  async verifyEmail(token: string): Promise<{ message: string }> {
    try {
      const payload: any = this.jwtService.verify(token);
      await this.userModel.updateOne(
        { _id: payload.sub },
        { isEmailVerified: true },
      );
      return { message: 'X√°c th·ª±c email th√†nh c√¥ng!' };
    } catch (error) {
      throw new BadRequestException(
        'Token x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.',
      );
    }
  }

  // --- ƒêƒÉng nh·∫≠p ---
  async login(loginUserDto: LoginUserDto): Promise<{ accessToken: string }> {
    const { email, password } = loginUserDto;

    const user = await this.userModel.findOne({ email }).select('+password');
    if (!user) {
      throw new UnauthorizedException('Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c.');
    }

    const isPasswordMatched = await bcrypt.compare(password, user.password);
    if (!isPasswordMatched) {
      throw new UnauthorizedException('Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c.');
    }

    // üö® Check verify email
    if (!user.isEmailVerified) {
      throw new UnauthorizedException(
        'T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c email. Vui l√≤ng ki·ªÉm tra email ho·∫∑c y√™u c·∫ßu g·ª≠i l·∫°i li√™n k·∫øt x√°c th·ª±c.',
      );
    }

    const payload = { sub: user._id, username: user.username };
    const accessToken = this.jwtService.sign(payload);

    return { accessToken };
  }

  async forgotPassword(email: string): Promise<{ message: string }> {
    const user = await this.userModel.findOne({ email });
    if (!user) {
      throw new NotFoundException('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email n√†y.');
    }

    const resetToken = randomBytes(32).toString('hex');
    user.passwordResetToken = createHash('sha256')
      .update(resetToken)
      .digest('hex');
    user.passwordResetExpires = new Date(Date.now() + 10 * 60 * 1000);
    await user.save();

    const frontendUrl =
      this.configService.get<string>('FRONTEND_URL') ||
      'https://font-media.vercel.app';

    const resetUrl = `${frontendUrl.replace(/\/$/, '')}/reset-password/${resetToken}`;

    await this.mailerService.sendMail({
      to: user.email,
      subject: 'Y√™u c·∫ßu ƒê·∫∑t l·∫°i M·∫≠t kh·∫©u',
      html: `<p>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. Vui l√≤ng b·∫•m v√†o <a href="${resetUrl}">ƒë√¢y</a> ƒë·ªÉ ti·∫øp t·ª•c.</p><p>Link n√†y s·∫Ω h·∫øt h·∫°n sau 10 ph√∫t.</p>`,
    });

    return { message: 'Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i.' };
  }

  async resetPassword(
    token: string,
    newPassword: string,
  ): Promise<{ message: string }> {
    const hashedToken = createHash('sha256').update(token).digest('hex');

    const user = await this.userModel.findOne({
      passwordResetToken: hashedToken,
      passwordResetExpires: { $gt: Date.now() },
    });

    if (!user) {
      throw new BadRequestException('Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.');
    }

    const salt = await bcrypt.genSalt();
    user.password = await bcrypt.hash(newPassword, salt);
    user.passwordResetToken = undefined;
    user.passwordResetExpires = undefined;
    await user.save();

    return { message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng.' };
  }
}
